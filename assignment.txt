

---
- hosts: localhost
  become: true
  tasks:
  - name: Create an S3 bucket
    s3_bucket: 
	  aws_access_key: TESTJLHNMCBOITV64NAG 
	  aws_secret_key: ghjrhjjjg4TB7cv9k+bdLqMGHKSTQIsZD43RVuSKwthdf 
	  bucket: mylogsbucket 
	  mode: create 
	  region: us-west-2
	  
  - name: Enable logging of s3 bucket mywebsite.com to s3 bucket mylogs
    s3_logging:
      name: mywebsite.com
      target_bucket: mylogsbucket
      target_prefix: logs/mywebsite.com
      state: present
      security_token:ABCDXYZ 	  

  - name: Enable Lifecycle rules
    s3_lifecycle:
      name: mylogsbucket
      prefix: /logs/
      state: present
      status: enabled
	  security_token: ABCDXYZ
      transitions:
        - transition_days: 30
          storage_class: standard_ia
        - transition_days: 90
          storage_class: glacier
















ansible-vault create aws_keys.yml

   aws_access_key: TESTJLHNMCBOITV64NAG
   aws_secret_key: ghjrhjjjg4TB7cv9k+bdLqMGHKSTQIsZD43RVuSKwthdf










vi /hosts

 [local]
 localhost







vi assignment-ec2.yml

---
- hosts: local
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.micro
    security_group: java_application_sg
    image: ami-123456
    keypair: nagjava 
    region: us-west-2
    count: 1
  vars_files:
    - aws_keys.yml
  task:
  - name: Create a security group
    ec2_group:
      name: "{{ security_group }}"
      description: The webservers security group
      region: "{{ region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0 
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Launch the new EC2 Instance
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      group: "{{ security_group }}"
      instance_type: "{{ instance_type }}"
      image: "{{ image }}"
      wait: true 
      region: "{{ region }}"
      keypair: "{{ keypair }}"
      count: "{{count}}"
    register: ec2

  - name: Add the newly created host so that we can further contact it
    add_host:
      name: "{{ item.public_ip }}"
      groups: appservers
    with_items: "{{ ec2.instances }}"

  - name: Add tag to Instance(s)
    ec2_tag:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      resource: "{{ item.id }}" 
      region: "{{ region }}" 
      state: "present"
    with_items: "{{ ec2.instances }}"
    args:
      tags:
        Type: appserver

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22 
      state: started 
    with_items: "{{ ec2.instances }}"

	  



ansible-playbook -i hosts --ask-vault-pass assignment-ec2.yml




vi assignment_app.yml

---
- hosts: appservers
  remote_user: appuser
  become: yes
  gather_facts: no
  vars:
    APPLICATION_NAME: "{{lookup('env','APPLICATION_NAME')}}"

  - name: Create directory
    file: path=/assignment/nag state=directory mode=0777
	
  - name: Git checkout from github
    git: repo=https://github.com/sweetdumbu/Assignment.git dest=/assignment/nag
  
  - name: Check if java is installed
    command: java -version
    become_user: '{{ global_vars.user_session }}' 
    register: java_result
    ignore_errors: True

  - debug:
    msg: "Failed - Java is not installed"
    when: java_result is failed

  - debug:
    msg: "Success - Java is installed"
    when:  java_result is success 
  
  - name: list the files
    command: ls
    register: result
  
  - name: stop the application
    shell: ps aux | grep -i '/u01/app'
    register: result

  - name: stop the application
    shell: "/u01/app/stop_app.sh"
    register: result
    ignore_errors: True
  
  - name: stop the application
    shell: ps -ef | grep app
    ignore_errors: True

  - name: validate the application
    command: "/u01/app/validate_app.sh"	

  - name: start the application
    command: "/u01/app/start_app.sh"		
	
  - name: Config file path set
    copy: src=/etc/.conf dest=/etc/{{APPLICATION_NAME}}/config/.conf	
	



ansible-playbook -i hosts assignment_app.yml	

